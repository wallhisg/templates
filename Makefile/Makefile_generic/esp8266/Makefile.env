#======================================================================
# 	base directory for the compiler
# 	select which tools to use as compiler, librarian and linker
XTENSA_BASE := $(HOME)/projects/IoT/mcu/platforms/espressif/esp8266_sdk/2.2.1/xtensa-lx106-elf/bin
CC			:= $(XTENSA_BASE)/xtensa-lx106-elf-gcc
AR			:= $(XTENSA_BASE)/xtensa-lx106-elf-ar
LD			:= $(XTENSA_BASE)/xtensa-lx106-elf-gcc
CXX			:= $(XTENSA_BASE)/xtensa-lx106-elf-g++
#======================================================================
# 	base directory of the ESP8266 SDK package, absolute
SDK_BASE	:= $(HOME)/projects/IoT/mcu/platforms/espressif/esp8266_sdk/2.2.1/ESP8266_NONOS_SDK_2.2.1

SDK_LIB_DIR	:= lib
SDK_LIB_DIR	:= $(addprefix $(SDK_BASE)/,$(SDK_LIB_DIR))
SDK_INC_DIR	:= include
SDK_INC_DIR	+= include/json
SDK_INC_DIR	:= $(addprefix $(SDK_BASE)/,$(SDK_INC_DIR))

SDK_LIBS	:= c gcc hal pp phy net80211 lwip wpa pwm upgrade main ssl crypto smartconfig espnow json airkiss
# SDK_LIB	:=	hal phy pp net80211 lwip2-536-feat wpa crypto main wps bearssl axtls espnow smartconfig airkiss wpa2 stdc++
#======================================================================
# select which tools to use as compiler, 
# librarian and linker
#======================================================================

# CFLAGS	+= -std=c99 
# CFLAGS 	+= -Wall -O1 -Os
# CFLAGS	+= -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums

# 		CFLAGS
EXTRA_FLAGS	+= $(addprefix -I,$(ROOT_BASE))
EXTRA_FLAGS	+= $(addprefix -I,$(PRJ_BASE))

FLASH_SIZE_MAP :=	4MB
CFLAGS		+=	-DSPI_FLASH_SIZE_MAP=$(FLASH_SIZE_MAP)
CFLAGS		+=	-D__ets__ -DICACHE_FLASH 
CFLAGS		+=	-Os -g -O2 -Wundef -Werror -Wl,-EL -nostdlib -mlongcalls  
CFLAGS		+=	-mtext-section-literals -ffunction-sections -fdata-sections  
CFLAGS		+=	-nostdlib -Wl,--no-check-sections -u call_user_start -Wl,
CFLAGS		+=	-static -fno-builtin-printf
CFLAGS		+=	-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
CFLAGS 		+=	$(addprefix -I,$(SDK_INC_DIR))
CFLAGS		+=	$(EXTRA_FLAGS)
# 		CXXFLAGS
CXXFLAGS	+= -std=c++11
CXXFLAGS	+=	$(EXTRA_FLAGS)
#======================================================================
# select which tools to use as compiler, librarian and linker
#======================================================================
ARFLAGS = rv

#======================================================================
# select which tools to use as , librarian and linker
CCX_FLAG	:= $(suffix $(PRJ_SRC_CPP))

ifeq ($(CCX_FLAG), .cpp)
	CCX := g++
	CCXFLAGS := CXXFLAGS
else
	CCX := gcc
	CCXFLAGS := CFLAGS
endif

#======================================================================
all: checkdirs build

build: checkdirs build-dep build-obj build-lib

build-lib: $(PROGRAM_A_FILE) $(PRJ_LOCAL_LIB)
$(BUILD_BASE)/%.a: $(PRJ_OBJ)
	$(AR) cru $@ $(PRJ_OBJ)

build-obj: $(PRJ_OBJ)
$(BUILD_BASE)/%.o: %.c
	$(CC) $(CFLAGS) $(MLD_INC) -c $< -o $@

$(BUILD_BASE)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(MLD_INC) -c $< -o $@	

build-dep: $(PRJ_DEP_C) $(PRJ_DEP_CPP)

checkdirs: $(BUILD_DIR) $(BUILD_TEST_DIR)
$(BUILD_DIR):
	$(Q) @mkdir -p $@

$(BUILD_TEST_DIR):
	$(Q) @mkdir -p $@

clean:
	rm -rf $(BUILD_BASE)
