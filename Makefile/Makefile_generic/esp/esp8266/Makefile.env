#----------------------------------------------------------------------------------
# 	base directory of the ESP8266 SDK package, absolute
SDK_BASE		:= $(HOME)/projects/IoT/mcu/platforms/espressif/esp8266_sdk/2.2.1/ESP8266_NONOS_SDK_2.2.1
#----------------------------------------------------------------------------------
# 	various paths from the SDK used in this project
SDK_LIB_DIR		:= lib
SDK_LIB_DIR		:= $(addprefix $(SDK_BASE)/,$(SDK_LIB_DIR))

SDK_INC_DIR		:= include
SDK_INC_DIR		+= include/json
SDK_INC_DIR		:= $(addprefix -I$(SDK_BASE)/,$(SDK_INC_DIR))
#----------------------------------------------------------------------------------
#	no user configurable options below here
#----------------------------------------------------------------------------------
# 	libraries used in this project, mainly provided by the SDK
SDK_LIB 		:= c gcc hal pp phy net80211 lwip wpa pwm upgrade main ssl crypto smartconfig espnow json airkiss
SDK_LIB			:= $(addprefix -l,$(SDK_LIB))
#----------------------------------------------------------------------------------
# 	compiler flags using during compilation of source files
FLASH_SIZE_MAP	:= 4MB
CFLAGS			+= -Os -g -O2 -Wundef -Werror -Wl,-EL -nostdlib -mlongcalls -mtext-section-literals  
CFLAGS			+= -ffunction-sections -fdata-sections -fno-builtin-printf 
CFLAGS			+= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static 
CFLAGS 			+= $(SDK_INC_DIR)
#----------------------------------------------------------------------------------
# add edk and root dirs into CFLAGS
CFLAGS			+= $(addprefix -I,$(PRJ_BASE))
CFLAGS			+= $(addprefix -I,$(ROOT_BASE))
# CFLAGS		+= $(addprefix -I,$(EDK_BASE))
#----------------------------------------------------------------------------------
LDFLAGS			:= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static
LDFLAGS			+= -static -Wl,-Map -Wl,--cref -Wl
#----------------------------------------------------------------------------------
# 	linker flags used to generate the main object file
# 	linker script used for the above linkier step
SDK_LD_DIR		:= ld
LD_SCRIPT		:= -T$(SDK_BASE)/$(SDK_LD_DIR)/eagle.app.v6.ld
MAP				:= 'esptool.py --spi-flash-size-map'
#----------------------------------------------------------------------------------
# 	base directory for the compiler
# 	select which tools to use as compiler, librarian and linker
XTENSA_BASE 	:= /home/wall/projects/IoT/mcu/platforms/espressif/esp8266_sdk/2.2.1/xtensa-lx106-elf/bin
CC				:= $(XTENSA_BASE)/xtensa-lx106-elf-gcc
AR				:= $(XTENSA_BASE)/xtensa-lx106-elf-ar
LD				:= $(XTENSA_BASE)/xtensa-lx106-elf-gcc
CXX				:= $(XTENSA_BASE)/xtensa-lx106-elf-g++
#----------------------------------------------------------------------------------
# 	esptool.py path and port
ESPTOOL			?= esptool.py
ESPPORT			?= /dev/ttyUSB0
BAUDRATE		:= 115200
# BAUDRATE		:= 480600
FLASH_FREQ		:= 40m
FLASH_MODE		:= dio
FLASH_SIZE		:= 4MB
#----------------------------------------------------------------------------------
VERBOSE = 1
V ?= $(VERBOSE)
ifeq ("$(V)","1")
Q :=
vecho := @true
else
Q := @
vecho := echo
endif
#----------------------------------------------------------------------------------
all: config checkdirs $(PRJ_DEP) $(PRJ_OBJ) $(PRJ_LIB_AR) $(PRJ_OUT) $(FW_FILE_1) $(FW_FILE_2)

build: $(PRJ_OBJ)

flash: $(FW_FILE_1) $(FW_FILE_2)
	$(ESPTOOL) --port $(ESPPORT) \
	--baud $(BAUDRATE) \
	write_flash --flash_freq $(FLASH_FREQ) --flash_mode $(FLASH_MODE) --flash_size $(FLASH_SIZE)  \
	$(FW_FILE_1_ADDR) $(FW_FILE_1) $(FW_FILE_2_ADDR) $(FW_FILE_2) \
	0x3fc000 $(SDK_BASE)/bin/esp_init_data_default_v05.bin
#	$(ESPTOOL) --port $(ESPPORT) erase_flash

checkdirs: $(PRJ_BUILD_DIR)
# .o
$(BUILD_BASE)/%.o: $(PRJ_BASE)/%.c
	$(Q) $(CC) $(CFLAGS) $(MLD_INC) -c $< -o $@

$(BUILD_BASE)/%.o: $(PRJ_BASE)/%.cpp
	$(Q) $(CXX) $(CFLAGS) $(MLD_INC) -c $< -o $@	

$(PRJ_BUILD_DIR):
	$(MKDIR) $@
	
clean:
	$(RMDIR) $(PRJ_BUILD_DIR)